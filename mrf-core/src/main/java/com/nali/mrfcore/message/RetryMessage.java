/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nali.mrfcore.message;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * RetryMessage
 */
public class RetryMessage implements org.apache.thrift.TBase<RetryMessage, RetryMessage._Fields>, java.io.Serializable, Cloneable, Comparable<RetryMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RetryMessage");

  private static final org.apache.thrift.protocol.TField MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("msgID", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField RETRY_QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("retryQueueName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BUSINESS_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("businessMsg", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RETRY_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("retryInterval", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField RETRIED_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("retriedTimes", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_RETRY_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("maxRetryTimes", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField MESSAGE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("messageFlag", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField IS_FROM_RECOVER_FIELD_DESC = new org.apache.thrift.protocol.TField("isFromRecover", org.apache.thrift.protocol.TType.BOOL, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RetryMessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RetryMessageTupleSchemeFactory());
  }

  public long msgID; // required
  public String retryQueueName; // required
  public String businessMsg; // required
  public long retryInterval; // required
  public int retriedTimes; // required
  public int maxRetryTimes; // required
  public int messageFlag; // required
  public boolean isFromRecover; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MSG_ID((short)1, "msgID"),
    RETRY_QUEUE_NAME((short)2, "retryQueueName"),
    BUSINESS_MSG((short)3, "businessMsg"),
    RETRY_INTERVAL((short)4, "retryInterval"),
    RETRIED_TIMES((short)5, "retriedTimes"),
    MAX_RETRY_TIMES((short)6, "maxRetryTimes"),
    MESSAGE_FLAG((short)7, "messageFlag"),
    IS_FROM_RECOVER((short)8, "isFromRecover");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MSG_ID
          return MSG_ID;
        case 2: // RETRY_QUEUE_NAME
          return RETRY_QUEUE_NAME;
        case 3: // BUSINESS_MSG
          return BUSINESS_MSG;
        case 4: // RETRY_INTERVAL
          return RETRY_INTERVAL;
        case 5: // RETRIED_TIMES
          return RETRIED_TIMES;
        case 6: // MAX_RETRY_TIMES
          return MAX_RETRY_TIMES;
        case 7: // MESSAGE_FLAG
          return MESSAGE_FLAG;
        case 8: // IS_FROM_RECOVER
          return IS_FROM_RECOVER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MSGID_ISSET_ID = 0;
  private static final int __RETRYINTERVAL_ISSET_ID = 1;
  private static final int __RETRIEDTIMES_ISSET_ID = 2;
  private static final int __MAXRETRYTIMES_ISSET_ID = 3;
  private static final int __MESSAGEFLAG_ISSET_ID = 4;
  private static final int __ISFROMRECOVER_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("msgID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RETRY_QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("retryQueueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_MSG, new org.apache.thrift.meta_data.FieldMetaData("businessMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETRY_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("retryInterval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RETRIED_TIMES, new org.apache.thrift.meta_data.FieldMetaData("retriedTimes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_RETRY_TIMES, new org.apache.thrift.meta_data.FieldMetaData("maxRetryTimes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MESSAGE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("messageFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_FROM_RECOVER, new org.apache.thrift.meta_data.FieldMetaData("isFromRecover", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RetryMessage.class, metaDataMap);
  }

  public RetryMessage() {
  }
  
  public RetryMessage(
    long msgID,
    String retryQueueName,
    String businessMsg,
    long retryInterval,
    int retriedTimes,
    int maxRetryTimes,
    int messageFlag,
    boolean isFromRecover)
  {
    this();
    this.msgID = msgID;
    setMsgIDIsSet(true);
    this.retryQueueName = retryQueueName;
    this.businessMsg = businessMsg;
    this.retryInterval = retryInterval;
    setRetryIntervalIsSet(true);
    this.retriedTimes = retriedTimes;
    setRetriedTimesIsSet(true);
    this.maxRetryTimes = maxRetryTimes;
    setMaxRetryTimesIsSet(true);
    this.messageFlag = messageFlag;
    setMessageFlagIsSet(true);
    this.isFromRecover = isFromRecover;
    setIsFromRecoverIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RetryMessage(RetryMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.msgID = other.msgID;
    if (other.isSetRetryQueueName()) {
      this.retryQueueName = other.retryQueueName;
    }
    if (other.isSetBusinessMsg()) {
      this.businessMsg = other.businessMsg;
    }
    this.retryInterval = other.retryInterval;
    this.retriedTimes = other.retriedTimes;
    this.maxRetryTimes = other.maxRetryTimes;
    this.messageFlag = other.messageFlag;
    this.isFromRecover = other.isFromRecover;
  }

  public RetryMessage deepCopy() {
    return new RetryMessage(this);
  }

  @Override
  public void clear() {
    setMsgIDIsSet(false);
    this.msgID = 0;
    this.retryQueueName = null;
    this.businessMsg = null;
    setRetryIntervalIsSet(false);
    this.retryInterval = 0;
    setRetriedTimesIsSet(false);
    this.retriedTimes = 0;
    setMaxRetryTimesIsSet(false);
    this.maxRetryTimes = 0;
    setMessageFlagIsSet(false);
    this.messageFlag = 0;
    setIsFromRecoverIsSet(false);
    this.isFromRecover = false;
  }

  public long getMsgID() {
    return this.msgID;
  }

  public RetryMessage setMsgID(long msgID) {
    this.msgID = msgID;
    setMsgIDIsSet(true);
    return this;
  }

  public void unsetMsgID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSGID_ISSET_ID);
  }

  /** Returns true if field msgID is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgID() {
    return EncodingUtils.testBit(__isset_bitfield, __MSGID_ISSET_ID);
  }

  public void setMsgIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSGID_ISSET_ID, value);
  }

  public String getRetryQueueName() {
    return this.retryQueueName;
  }

  public RetryMessage setRetryQueueName(String retryQueueName) {
    this.retryQueueName = retryQueueName;
    return this;
  }

  public void unsetRetryQueueName() {
    this.retryQueueName = null;
  }

  /** Returns true if field retryQueueName is set (has been assigned a value) and false otherwise */
  public boolean isSetRetryQueueName() {
    return this.retryQueueName != null;
  }

  public void setRetryQueueNameIsSet(boolean value) {
    if (!value) {
      this.retryQueueName = null;
    }
  }

  public String getBusinessMsg() {
    return this.businessMsg;
  }

  public RetryMessage setBusinessMsg(String businessMsg) {
    this.businessMsg = businessMsg;
    return this;
  }

  public void unsetBusinessMsg() {
    this.businessMsg = null;
  }

  /** Returns true if field businessMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessMsg() {
    return this.businessMsg != null;
  }

  public void setBusinessMsgIsSet(boolean value) {
    if (!value) {
      this.businessMsg = null;
    }
  }

  public long getRetryInterval() {
    return this.retryInterval;
  }

  public RetryMessage setRetryInterval(long retryInterval) {
    this.retryInterval = retryInterval;
    setRetryIntervalIsSet(true);
    return this;
  }

  public void unsetRetryInterval() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETRYINTERVAL_ISSET_ID);
  }

  /** Returns true if field retryInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetRetryInterval() {
    return EncodingUtils.testBit(__isset_bitfield, __RETRYINTERVAL_ISSET_ID);
  }

  public void setRetryIntervalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETRYINTERVAL_ISSET_ID, value);
  }

  public int getRetriedTimes() {
    return this.retriedTimes;
  }

  public RetryMessage setRetriedTimes(int retriedTimes) {
    this.retriedTimes = retriedTimes;
    setRetriedTimesIsSet(true);
    return this;
  }

  public void unsetRetriedTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETRIEDTIMES_ISSET_ID);
  }

  /** Returns true if field retriedTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetRetriedTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __RETRIEDTIMES_ISSET_ID);
  }

  public void setRetriedTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETRIEDTIMES_ISSET_ID, value);
  }

  public int getMaxRetryTimes() {
    return this.maxRetryTimes;
  }

  public RetryMessage setMaxRetryTimes(int maxRetryTimes) {
    this.maxRetryTimes = maxRetryTimes;
    setMaxRetryTimesIsSet(true);
    return this;
  }

  public void unsetMaxRetryTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXRETRYTIMES_ISSET_ID);
  }

  /** Returns true if field maxRetryTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxRetryTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXRETRYTIMES_ISSET_ID);
  }

  public void setMaxRetryTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXRETRYTIMES_ISSET_ID, value);
  }

  public int getMessageFlag() {
    return this.messageFlag;
  }

  public RetryMessage setMessageFlag(int messageFlag) {
    this.messageFlag = messageFlag;
    setMessageFlagIsSet(true);
    return this;
  }

  public void unsetMessageFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGEFLAG_ISSET_ID);
  }

  /** Returns true if field messageFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __MESSAGEFLAG_ISSET_ID);
  }

  public void setMessageFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGEFLAG_ISSET_ID, value);
  }

  public boolean isFromRecover() {
    return this.isFromRecover;
  }

  public RetryMessage setIsFromRecover(boolean isFromRecover) {
    this.isFromRecover = isFromRecover;
    setIsFromRecoverIsSet(true);
    return this;
  }

  public void unsetIsFromRecover() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFROMRECOVER_ISSET_ID);
  }

  /** Returns true if field isFromRecover is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFromRecover() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFROMRECOVER_ISSET_ID);
  }

  public void setIsFromRecoverIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFROMRECOVER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MSG_ID:
      if (value == null) {
        unsetMsgID();
      } else {
        setMsgID((Long)value);
      }
      break;

    case RETRY_QUEUE_NAME:
      if (value == null) {
        unsetRetryQueueName();
      } else {
        setRetryQueueName((String)value);
      }
      break;

    case BUSINESS_MSG:
      if (value == null) {
        unsetBusinessMsg();
      } else {
        setBusinessMsg((String)value);
      }
      break;

    case RETRY_INTERVAL:
      if (value == null) {
        unsetRetryInterval();
      } else {
        setRetryInterval((Long)value);
      }
      break;

    case RETRIED_TIMES:
      if (value == null) {
        unsetRetriedTimes();
      } else {
        setRetriedTimes((Integer)value);
      }
      break;

    case MAX_RETRY_TIMES:
      if (value == null) {
        unsetMaxRetryTimes();
      } else {
        setMaxRetryTimes((Integer)value);
      }
      break;

    case MESSAGE_FLAG:
      if (value == null) {
        unsetMessageFlag();
      } else {
        setMessageFlag((Integer)value);
      }
      break;

    case IS_FROM_RECOVER:
      if (value == null) {
        unsetIsFromRecover();
      } else {
        setIsFromRecover((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MSG_ID:
      return Long.valueOf(getMsgID());

    case RETRY_QUEUE_NAME:
      return getRetryQueueName();

    case BUSINESS_MSG:
      return getBusinessMsg();

    case RETRY_INTERVAL:
      return Long.valueOf(getRetryInterval());

    case RETRIED_TIMES:
      return Integer.valueOf(getRetriedTimes());

    case MAX_RETRY_TIMES:
      return Integer.valueOf(getMaxRetryTimes());

    case MESSAGE_FLAG:
      return Integer.valueOf(getMessageFlag());

    case IS_FROM_RECOVER:
      return Boolean.valueOf(isFromRecover());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MSG_ID:
      return isSetMsgID();
    case RETRY_QUEUE_NAME:
      return isSetRetryQueueName();
    case BUSINESS_MSG:
      return isSetBusinessMsg();
    case RETRY_INTERVAL:
      return isSetRetryInterval();
    case RETRIED_TIMES:
      return isSetRetriedTimes();
    case MAX_RETRY_TIMES:
      return isSetMaxRetryTimes();
    case MESSAGE_FLAG:
      return isSetMessageFlag();
    case IS_FROM_RECOVER:
      return isSetIsFromRecover();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RetryMessage)
      return this.equals((RetryMessage)that);
    return false;
  }

  public boolean equals(RetryMessage that) {
    if (that == null)
      return false;

    boolean this_present_msgID = true;
    boolean that_present_msgID = true;
    if (this_present_msgID || that_present_msgID) {
      if (!(this_present_msgID && that_present_msgID))
        return false;
      if (this.msgID != that.msgID)
        return false;
    }

    boolean this_present_retryQueueName = true && this.isSetRetryQueueName();
    boolean that_present_retryQueueName = true && that.isSetRetryQueueName();
    if (this_present_retryQueueName || that_present_retryQueueName) {
      if (!(this_present_retryQueueName && that_present_retryQueueName))
        return false;
      if (!this.retryQueueName.equals(that.retryQueueName))
        return false;
    }

    boolean this_present_businessMsg = true && this.isSetBusinessMsg();
    boolean that_present_businessMsg = true && that.isSetBusinessMsg();
    if (this_present_businessMsg || that_present_businessMsg) {
      if (!(this_present_businessMsg && that_present_businessMsg))
        return false;
      if (!this.businessMsg.equals(that.businessMsg))
        return false;
    }

    boolean this_present_retryInterval = true;
    boolean that_present_retryInterval = true;
    if (this_present_retryInterval || that_present_retryInterval) {
      if (!(this_present_retryInterval && that_present_retryInterval))
        return false;
      if (this.retryInterval != that.retryInterval)
        return false;
    }

    boolean this_present_retriedTimes = true;
    boolean that_present_retriedTimes = true;
    if (this_present_retriedTimes || that_present_retriedTimes) {
      if (!(this_present_retriedTimes && that_present_retriedTimes))
        return false;
      if (this.retriedTimes != that.retriedTimes)
        return false;
    }

    boolean this_present_maxRetryTimes = true;
    boolean that_present_maxRetryTimes = true;
    if (this_present_maxRetryTimes || that_present_maxRetryTimes) {
      if (!(this_present_maxRetryTimes && that_present_maxRetryTimes))
        return false;
      if (this.maxRetryTimes != that.maxRetryTimes)
        return false;
    }

    boolean this_present_messageFlag = true;
    boolean that_present_messageFlag = true;
    if (this_present_messageFlag || that_present_messageFlag) {
      if (!(this_present_messageFlag && that_present_messageFlag))
        return false;
      if (this.messageFlag != that.messageFlag)
        return false;
    }

    boolean this_present_isFromRecover = true;
    boolean that_present_isFromRecover = true;
    if (this_present_isFromRecover || that_present_isFromRecover) {
      if (!(this_present_isFromRecover && that_present_isFromRecover))
        return false;
      if (this.isFromRecover != that.isFromRecover)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RetryMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMsgID()).compareTo(other.isSetMsgID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgID, other.msgID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetryQueueName()).compareTo(other.isSetRetryQueueName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetryQueueName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retryQueueName, other.retryQueueName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessMsg()).compareTo(other.isSetBusinessMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessMsg, other.businessMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetryInterval()).compareTo(other.isSetRetryInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetryInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retryInterval, other.retryInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetriedTimes()).compareTo(other.isSetRetriedTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetriedTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retriedTimes, other.retriedTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxRetryTimes()).compareTo(other.isSetMaxRetryTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxRetryTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxRetryTimes, other.maxRetryTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageFlag()).compareTo(other.isSetMessageFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageFlag, other.messageFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFromRecover()).compareTo(other.isSetIsFromRecover());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFromRecover()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFromRecover, other.isFromRecover);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RetryMessage(");
    boolean first = true;

    sb.append("msgID:");
    sb.append(this.msgID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("retryQueueName:");
    if (this.retryQueueName == null) {
      sb.append("null");
    } else {
      sb.append(this.retryQueueName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessMsg:");
    if (this.businessMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.businessMsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("retryInterval:");
    sb.append(this.retryInterval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("retriedTimes:");
    sb.append(this.retriedTimes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxRetryTimes:");
    sb.append(this.maxRetryTimes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageFlag:");
    sb.append(this.messageFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isFromRecover:");
    sb.append(this.isFromRecover);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RetryMessageStandardSchemeFactory implements SchemeFactory {
    public RetryMessageStandardScheme getScheme() {
      return new RetryMessageStandardScheme();
    }
  }

  private static class RetryMessageStandardScheme extends StandardScheme<RetryMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RetryMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MSG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.msgID = iprot.readI64();
              struct.setMsgIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RETRY_QUEUE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.retryQueueName = iprot.readString();
              struct.setRetryQueueNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BUSINESS_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessMsg = iprot.readString();
              struct.setBusinessMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RETRY_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.retryInterval = iprot.readI64();
              struct.setRetryIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RETRIED_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.retriedTimes = iprot.readI32();
              struct.setRetriedTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX_RETRY_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxRetryTimes = iprot.readI32();
              struct.setMaxRetryTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MESSAGE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.messageFlag = iprot.readI32();
              struct.setMessageFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_FROM_RECOVER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFromRecover = iprot.readBool();
              struct.setIsFromRecoverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RetryMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MSG_ID_FIELD_DESC);
      oprot.writeI64(struct.msgID);
      oprot.writeFieldEnd();
      if (struct.retryQueueName != null) {
        oprot.writeFieldBegin(RETRY_QUEUE_NAME_FIELD_DESC);
        oprot.writeString(struct.retryQueueName);
        oprot.writeFieldEnd();
      }
      if (struct.businessMsg != null) {
        oprot.writeFieldBegin(BUSINESS_MSG_FIELD_DESC);
        oprot.writeString(struct.businessMsg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RETRY_INTERVAL_FIELD_DESC);
      oprot.writeI64(struct.retryInterval);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RETRIED_TIMES_FIELD_DESC);
      oprot.writeI32(struct.retriedTimes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_RETRY_TIMES_FIELD_DESC);
      oprot.writeI32(struct.maxRetryTimes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MESSAGE_FLAG_FIELD_DESC);
      oprot.writeI32(struct.messageFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FROM_RECOVER_FIELD_DESC);
      oprot.writeBool(struct.isFromRecover);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RetryMessageTupleSchemeFactory implements SchemeFactory {
    public RetryMessageTupleScheme getScheme() {
      return new RetryMessageTupleScheme();
    }
  }

  private static class RetryMessageTupleScheme extends TupleScheme<RetryMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RetryMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMsgID()) {
        optionals.set(0);
      }
      if (struct.isSetRetryQueueName()) {
        optionals.set(1);
      }
      if (struct.isSetBusinessMsg()) {
        optionals.set(2);
      }
      if (struct.isSetRetryInterval()) {
        optionals.set(3);
      }
      if (struct.isSetRetriedTimes()) {
        optionals.set(4);
      }
      if (struct.isSetMaxRetryTimes()) {
        optionals.set(5);
      }
      if (struct.isSetMessageFlag()) {
        optionals.set(6);
      }
      if (struct.isSetIsFromRecover()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetMsgID()) {
        oprot.writeI64(struct.msgID);
      }
      if (struct.isSetRetryQueueName()) {
        oprot.writeString(struct.retryQueueName);
      }
      if (struct.isSetBusinessMsg()) {
        oprot.writeString(struct.businessMsg);
      }
      if (struct.isSetRetryInterval()) {
        oprot.writeI64(struct.retryInterval);
      }
      if (struct.isSetRetriedTimes()) {
        oprot.writeI32(struct.retriedTimes);
      }
      if (struct.isSetMaxRetryTimes()) {
        oprot.writeI32(struct.maxRetryTimes);
      }
      if (struct.isSetMessageFlag()) {
        oprot.writeI32(struct.messageFlag);
      }
      if (struct.isSetIsFromRecover()) {
        oprot.writeBool(struct.isFromRecover);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RetryMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.msgID = iprot.readI64();
        struct.setMsgIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.retryQueueName = iprot.readString();
        struct.setRetryQueueNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.businessMsg = iprot.readString();
        struct.setBusinessMsgIsSet(true);
      }
      if (incoming.get(3)) {
        struct.retryInterval = iprot.readI64();
        struct.setRetryIntervalIsSet(true);
      }
      if (incoming.get(4)) {
        struct.retriedTimes = iprot.readI32();
        struct.setRetriedTimesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.maxRetryTimes = iprot.readI32();
        struct.setMaxRetryTimesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.messageFlag = iprot.readI32();
        struct.setMessageFlagIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isFromRecover = iprot.readBool();
        struct.setIsFromRecoverIsSet(true);
      }
    }
  }

}

